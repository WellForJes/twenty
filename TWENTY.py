import os
import time
import math
import requests
import pandas as pd
from binance.client import Client
from ta.momentum import RSIIndicator
from ta.trend import EMAIndicator, ADXIndicator
from datetime import datetime
import pytz

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ===
TOTAL_DEPOSIT = 20
TRAIL_START_TRIGGER = 1.01
TRAIL_DISTANCE = 0.007
MAX_DEPOSIT_USAGE = 0.5
SYMBOLS = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "AVAXUSDT",
    "LINKUSDT", "INJUSDT", "APTUSDT", "SUIUSDT",
    "XRPUSDT", "NEARUSDT", "OPUSDT", "LDOUSDT", "FTMUSDT"
]
INTERVAL = Client.KLINE_INTERVAL_15MINUTE
LIMIT = 100

# === Telegram ===
TELEGRAM_TOKEN = "7925464368:AAEmy9EL3z216z0y8ml4t7rulC1v3ZstQ0U"
TELEGRAM_CHAT_ID = "349999939"

def send_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        pass

# === Binance API ===
api_key = os.getenv("BINANCE_API_KEY")
api_secret = os.getenv("BINANCE_API_SECRET")
client = Client(api_key, api_secret)

# === –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
open_positions = []
last_log_time = time.time()
logs = []

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
send_telegram("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É!")

while True:
    try:
        current_balance = TOTAL_DEPOSIT - sum([p['amount'] for p in open_positions if not p['closed']])
        session_logs = []
        for symbol in SYMBOLS:
            reasons = []
            df = pd.DataFrame(client.futures_klines(symbol=symbol, interval=INTERVAL, limit=LIMIT))
            df.columns = ["timestamp", "open", "high", "low", "close", "volume", "close_time", "quote_asset_volume",
                          "number_of_trades", "taker_buy_base_vol", "taker_buy_quote_vol", "ignore"]
            df[["open", "high", "low", "close", "volume"]] = df[["open", "high", "low", "close", "volume"]].astype(float)

            df['rsi'] = RSIIndicator(df['close']).rsi()
            df['ema20'] = EMAIndicator(df['close'], window=20).ema_indicator()
            df['ema50'] = EMAIndicator(df['close'], window=50).ema_indicator()
            df['adx'] = ADXIndicator(df['high'], df['low'], df['close']).adx()
            df['volume_mean20'] = df['volume'].rolling(window=20).mean()
            df['candle_size'] = abs(df['close'] - df['open'])
            df['candle_size_mean20'] = df['candle_size'].rolling(window=20).mean()

            latest = df.iloc[-1]
            price = latest['close']
            low = df['close'].iloc[-20:].min()
            high = df['close'].iloc[-20:].max()
            rsi = latest['rsi']
            ema20 = latest['ema20']
            ema50 = latest['ema50']
            adx = latest['adx']
            volume = latest['volume']
            volume_mean20 = latest['volume_mean20']
            candle_size = latest['candle_size']
            candle_size_mean20 = latest['candle_size_mean20']

            bullish_engulfing = df.iloc[-2]['close'] < df.iloc[-2]['open'] and df.iloc[-1]['close'] > df.iloc[-1]['open']
            bearish_engulfing = df.iloc[-2]['close'] > df.iloc[-2]['open'] and df.iloc[-1]['close'] < df.iloc[-1]['open']

            base_condition = adx < 25 and abs(adx - df.iloc[-2]['adx']) < 5 and volume > volume_mean20 and candle_size > candle_size_mean20

            if base_condition:
                if ema20 > ema50:
                    if not (price <= low * 1.01):
                        reasons.append("‚ùå –¶–µ–Ω–∞ –≤—ã—à–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
                    if not (rsi < 40):
                        reasons.append("‚ùå RSI –≤—ã—à–µ 40")
                    if not bullish_engulfing:
                        reasons.append("‚ùå –ù–µ—Ç –±—ã—á—å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞")
                elif ema20 < ema50:
                    if not (price >= high * 0.99):
                        reasons.append("‚ùå –¶–µ–Ω–∞ –Ω–∏–∂–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è")
                    if not (rsi > 60):
                        reasons.append("‚ùå RSI –Ω–∏–∂–µ 60")
                    if not bearish_engulfing:
                        reasons.append("‚ùå –ù–µ—Ç –º–µ–¥–≤–µ–∂—å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞")
                else:
                    reasons.append("‚ùå EMA –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

            for pos in open_positions:
                if pos['symbol'] == symbol and not pos['closed']:
                    if pos['side'] == 'long':
                        if price >= pos['entry_price'] * TRAIL_START_TRIGGER:
                            pos['trail_price'] = max(pos.get('trail_price', 0), price * (1 - TRAIL_DISTANCE))
                        if 'trail_price' in pos and price <= pos['trail_price']:
                            pnl = (price - pos['entry_price']) / pos['entry_price'] * pos['amount']
                            send_telegram(f"‚úÖ {symbol} LONG –∑–∞–∫—Ä—ã—Ç. PnL: {pnl:.2f} USDT")
                            pos['closed'] = True
                    elif pos['side'] == 'short':
                        if price <= pos['entry_price'] * (2 - TRAIL_START_TRIGGER):
                            pos['trail_price'] = min(pos.get('trail_price', float('inf')), price * (1 + TRAIL_DISTANCE))
                        if 'trail_price' in pos and price >= pos['trail_price']:
                            pnl = (pos['entry_price'] - price) / pos['entry_price'] * pos['amount']
                            send_telegram(f"‚úÖ {symbol} SHORT –∑–∞–∫—Ä—ã—Ç. PnL: {pnl:.2f} USDT")
                            pos['closed'] = True

            if base_condition and not reasons and current_balance * 0.1 <= TOTAL_DEPOSIT * MAX_DEPOSIT_USAGE:
                if ema20 > ema50 and price <= low * 1.01 and rsi < 40 and bullish_engulfing:
                    entry_amount = current_balance * 0.10
                    open_positions.append({'symbol': symbol, 'side': 'long', 'entry_price': price, 'amount': entry_amount, 'closed': False})
                    send_telegram(f"üöÄ –û—Ç–∫—Ä—ã—Ç LONG –ø–æ {symbol} –ø–æ —Ü–µ–Ω–µ {price:.2f}")
                elif ema20 < ema50 and price >= high * 0.99 and rsi > 60 and bearish_engulfing:
                    entry_amount = current_balance * 0.10
                    open_positions.append({'symbol': symbol, 'side': 'short', 'entry_price': price, 'amount': entry_amount, 'closed': False})
                    send_telegram(f"üöÄ –û—Ç–∫—Ä—ã—Ç SHORT –ø–æ {symbol} –ø–æ —Ü–µ–Ω–µ {price:.2f}")

            if base_condition:
                if not reasons:
                    session_logs.append(f"üîç {symbol}: –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ —Å–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
                else:
                    reason_text = "\n    ".join(reasons)
                    session_logs.append(f"üîç {symbol}: –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ —Å–¥–µ–ª–∫–∞ –ù–ï –æ—Ç–∫—Ä—ã—Ç–∞:\n    {reason_text}")
            else:
                session_logs.append(f"üîç {symbol}: –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

        if time.time() - last_log_time >= 300:
            report = "\n".join(session_logs)
            send_telegram(f"üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –û—Ç—á—ë—Ç:\n{report}")
            last_log_time = time.time()

    except Exception as e:
        send_telegram(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    time.sleep(60)
